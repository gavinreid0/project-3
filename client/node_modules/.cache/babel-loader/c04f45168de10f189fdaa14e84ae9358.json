{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nexport function setContext(setter) {\n  return new ApolloLink(function (operation, forward) {\n    var request = __rest(operation, []);\n\n    return new Observable(function (observer) {\n      var handle;\n      var closed = false;\n      Promise.resolve(request).then(function (req) {\n        return setter(req, operation.getContext());\n      }).then(operation.setContext).then(function () {\n        if (closed) return;\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(observer.error.bind(observer));\n      return function () {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/link/context/index.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAAgE,kBAAhE;AACA,SAAS,UAAT,QAA2B,0BAA3B;AAOA,OAAM,SAAU,UAAV,CAAqB,MAArB,EAA0C;AAC9C,SAAO,IAAI,UAAJ,CAAe,UAAC,SAAD,EAAuB,OAAvB,EAAwC;AAC5D,QAAW,OAAO,GAAA,MAAA,CAAK,SAAL,EAAZ,EAAY,CAAlB;;AAEA,WAAO,IAAI,UAAJ,CAAe,UAAA,QAAA,EAAQ;AAC5B,UAAI,MAAJ;AACA,UAAI,MAAM,GAAG,KAAb;AACA,MAAA,OAAO,CAAC,OAAR,CAAgB,OAAhB,EACG,IADH,CACQ,UAAA,GAAA,EAAG;AAAI,eAAA,MAAM,CAAC,GAAD,EAAM,SAAS,CAArB,UAAY,EAAN,CAAN;AAAmC,OADlD,EAEG,IAFH,CAEQ,SAAS,CAAC,UAFlB,EAGG,IAHH,CAGQ,YAAA;AAEJ,YAAI,MAAJ,EAAY;AACZ,QAAA,MAAM,GAAG,OAAO,CAAC,SAAD,CAAP,CAAmB,SAAnB,CAA6B;AACpC,UAAA,IAAI,EAAE,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB,QAAnB,CAD8B;AAEpC,UAAA,KAAK,EAAE,QAAQ,CAAC,KAAT,CAAe,IAAf,CAAoB,QAApB,CAF6B;AAGpC,UAAA,QAAQ,EAAE,QAAQ,CAAC,QAAT,CAAkB,IAAlB,CAAuB,QAAvB;AAH0B,SAA7B,CAAT;AAKD,OAXH,EAYG,KAZH,CAYS,QAAQ,CAAC,KAAT,CAAe,IAAf,CAAoB,QAApB,CAZT;AAcA,aAAO,YAAA;AACL,QAAA,MAAM,GAAG,IAAT;AACA,YAAI,MAAJ,EAAY,MAAM,CAAC,WAAP;AACb,OAHD;AAID,KArBM,CAAP;AAsBD,GAzBM,CAAP;AA0BD","sourcesContent":["import { ApolloLink, Operation, GraphQLRequest, NextLink } from '../core';\nimport { Observable } from '../../utilities';\n\nexport type ContextSetter = (\n  operation: GraphQLRequest,\n  prevContext: any,\n) => Promise<any> | any;\n\nexport function setContext(setter: ContextSetter): ApolloLink {\n  return new ApolloLink((operation: Operation, forward: NextLink) => {\n    const { ...request } = operation;\n\n    return new Observable(observer => {\n      let handle: ZenObservable.Subscription;\n      let closed = false;\n      Promise.resolve(request)\n        .then(req => setter(req, operation.getContext()))\n        .then(operation.setContext)\n        .then(() => {\n          // if the observer is already closed, no need to subscribe.\n          if (closed) return;\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}