{"ast":null,"code":"var _jsxFileName = \"/Users/rosas/Desktop/Web Development /SMU Bootcamp/smu-dal-fsf-pt-04-2021-u-c/22-State/01-Activities/24-Stu_Stripe/Solved/client/src/components/Cart/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css'; // stripePromise returns a promise with the stripe object as soon as the Stripe package loads\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, {\n    data\n  }] = useLazyQuery(QUERY_CHECKOUT); // We check to see if there is a data object that exists, if so this means that a checkout session was returned from the backend\n  // Then we should redirect to the checkout with a reference to our session id\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then(res => {\n        res.redirectToCheckout({\n          sessionId: data.checkout.session\n        });\n      });\n    }\n  }, [data]); // If the cart's length or if the dispatch function is updated, check to see if the cart is empty.\n  // If so, invoke the getCart method and populate the cart with the existing from the session\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({\n        type: ADD_MULTIPLE_TO_CART,\n        products: [...cart]\n      });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({\n      type: TOGGLE_CART\n    });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  } // When the submit checkout method is invoked, loop through each item in the cart\n  // Add each item id to the productIds array and then invoke the getCheckout query passing an object containing the id for all our products\n\n\n  function submitCheckout() {\n    const productIds = [];\n    state.cart.forEach(item => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n    getCheckout({\n      variables: {\n        products: productIds\n      }\n    });\n  }\n\n  if (!state.cartOpen) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-closed\",\n      onClick: toggleCart,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"trash\",\n        children: \"\\uD83D\\uDED2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"close\",\n      onClick: toggleCart,\n      children: \"[close]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Shopping Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), state.cart.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [state.cart.map(item => /*#__PURE__*/_jsxDEV(CartItem, {\n        item: item\n      }, item._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-row space-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Total: $\", calculateTotal()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), Auth.loggedIn() ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitCheckout,\n          children: \"Checkout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"(log in to check out)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"shocked\",\n        children: \"\\uD83D\\uDE31\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), \"You haven't added anything to your cart yet!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cart, \"SZX2XgrD/XhSAhjTNoTrKuaBFrc=\", false, function () {\n  return [useStoreContext, useLazyQuery];\n});\n\n_c = Cart;\nexport default Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["/Users/rosas/Desktop/Web Development /SMU Bootcamp/smu-dal-fsf-pt-04-2021-u-c/22-State/01-Activities/24-Stu_Stripe/Solved/client/src/components/Cart/index.js"],"names":["React","useEffect","loadStripe","useLazyQuery","QUERY_CHECKOUT","idbPromise","CartItem","Auth","useStoreContext","TOGGLE_CART","ADD_MULTIPLE_TO_CART","stripePromise","Cart","state","dispatch","getCheckout","data","then","res","redirectToCheckout","sessionId","checkout","session","getCart","cart","type","products","length","toggleCart","calculateTotal","sum","forEach","item","price","purchaseQuantity","toFixed","submitCheckout","productIds","i","push","_id","variables","cartOpen","map","loggedIn"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\n\n// stripePromise returns a promise with the stripe object as soon as the Stripe package loads\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  // We check to see if there is a data object that exists, if so this means that a checkout session was returned from the backend\n  // Then we should redirect to the checkout with a reference to our session id\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  // If the cart's length or if the dispatch function is updated, check to see if the cart is empty.\n  // If so, invoke the getCart method and populate the cart with the existing from the session\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  // When the submit checkout method is invoked, loop through each item in the cart\n  // Add each item id to the productIds array and then invoke the getCheckout query passing an object containing the id for all our products\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {/* Check to see if the user is logged in. If so render a button to check out */}\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n"]},"metadata":{},"sourceType":"module"}